import { StatusCodes } from 'http-status-codes'
import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'
import ApiError from '~/utils/ApiError'

// Middleware x√°c th·ª±c c√°i JWT accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´ ph√≠a FE c√≥ h·ª£p l·ªá kh√¥ng
const isAuthorized = async (req, res, next) => {
  // L·∫•y accessToken n·∫±m trong request Cookies t·ª´ client g·ª≠i l√™n (withCredentials = true trong file authorizedAxios)
  const clientAccessToken = req.cookies?.accessToken

  // n·∫øu clientAccessToken kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói lu√¥n
  if (!clientAccessToken) {
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized! (token is not found)'))
    return
  }

  try {
    // B∆∞·ªõc 1: Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ h·ª£p l·ªá kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(
      clientAccessToken,
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    )
    // console.log('üöÄ ~ isAuthorized ~ accessTokenDecoded:', accessTokenDecoded)

    // B∆∞·ªõc 2: Quan tr·ªçng: N·∫øu nh∆∞ c√°i token h·ª£p l·ªá th√¨ s·∫Ω c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o c√°i req.jwtDecoded ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng x·ª≠ l√Ω ph√≠a sau
    req.jwtDecoded = accessTokenDecoded

    // B∆∞·ªõc 3: Cho ph√©p c√°i request ƒëi ti·∫øp
    next()

  } catch (error) {
    // console.log('üöÄ ~ isAuthorized ~ error:', error)
    // N·∫øu accessToken b·ªã h·∫øt h·∫°n (expired) th√¨ m√¨nh c·∫ßn tr·∫£ v·ªÅ m·ªôt c√°i m√£ l·ªói GONE - 410 cho ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi API refreshToken
    if (error?.message?.includes('jwt expired')) {
      next(new ApiError(StatusCodes.GONE, 'Need to refresh token.'))
      return
    }

    // N·∫øu accessToken kh√¥ng h·ª£p l·ªá do b·∫•t k·ª≥ ƒëi·ªÅu g√¨ kh√°c ngo√†i h·∫øt h·∫°n th√¨ ch√∫ng ta tr·∫£ v·ªÅ m√£ 401 cho ph√≠a FE g·ªçi api signout lu√¥n
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized!'))
  }
}

export const authMiddleware = {
  isAuthorized
}